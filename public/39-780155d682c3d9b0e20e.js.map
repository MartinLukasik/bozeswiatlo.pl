{"version":3,"file":"39-780155d682c3d9b0e20e.js","mappings":"2HAAe,IAAf,ICEMA,EAASC,SAASC,eAAe,UAC3BF,EAAOG,WAAW,MACjBH,EAAOI,MAAQC,OAAOC,WACrBN,EAAOO,OAA8B,IAArBF,OAAOG,YACzB,IAAIC,MCJhB,IAAMC,EAAQT,SAASU,iBAAiB,WACzBV,SAASW,cAAc,WAE/BC,MAAMN,OAAYF,OAAOG,YAAhC,KAEAE,EAAMI,SAAQ,SAAAC,GAAI,OAElB,SAAsBA,GACpBA,EAAKC,iBAAiB,cAAc,kBAClCC,YAAW,kBAAMF,EAAKG,UAAUC,IAAI,cAAa,QAEnDJ,EAAKC,iBAAiB,cAAc,kBAClCC,YAAW,WACTF,EAAKG,UAAUE,OAAO,YACtBL,EAAKM,UAAY,IAChB,QAVeC,CAAaP","sources":["webpack://bozeswiatlo.pl/./static/img/canvas-bg.webp","webpack://bozeswiatlo.pl/./src/js/modules/background-animation.js","webpack://bozeswiatlo.pl/./src/js/main-page.js"],"sourcesContent":["export default __webpack_public_path__ + \"static/canvas-bg-667f1eb4fe98af44aaba78a65c56d14f.webp\";","import imgSrc from '../../../static/img/canvas-bg.webp'\n\nconst canvas = document.getElementById('canvas')\nconst ctx = canvas.getContext('2d')\nlet width = (canvas.width = window.innerWidth)\nlet height = (canvas.height = window.innerHeight * 0.55)\nconst img = new Image()\nconst imgInfo = {}\nconst imgs = []\nconst grids = []\nconst magnet = 2050\nconst mouse = {\n  x: 1,\n  y: 0,\n}\n\nexport function init() {\n  addListeners()\n\n  img.onload = function (e) {\n    // Check for firefox.\n    imgInfo.width = e.path ? e.path[0].width : e.target.width\n    imgInfo.height = e.path ? e.path[0].height : e.target.height\n\n    const numberToShow =\n      Math.ceil(window.innerWidth / imgInfo.width) *\n      Math.ceil(window.innerHeight / imgInfo.height)\n\n    createGrid()\n    if (window.matchMedia('(min-width: 500px)').matches) {\n      populateCanvas(numberToShow * 15)\n    }\n\n    // Image is ready and we're ready to go\n    canvas.classList.add('ready')\n    render()\n  }\n\n  return (img.src = imgSrc)\n}\n\nfunction addListeners() {\n  window.addEventListener('resize', resizeCanvas)\n  window.addEventListener('mousemove', updateMouse)\n}\n\nfunction updateMouse(e) {\n  mouse.x = e.clientX\n  mouse.y = e.clientY\n}\n\nfunction resizeCanvas() {\n  width = canvas.width = window.innerWidth\n  height = canvas.height = window.innerHeight\n}\n\n// Magic\nfunction populateCanvas(nb) {\n  let i = 0\n  return (() => {\n    const result = []\n    while (i <= nb) {\n      const p = new Photo()\n      imgs.push(p)\n      result.push(i++)\n    }\n    return result\n  })()\n}\n\nfunction createGrid() {\n  const imgScale = 0.4\n  const grid = {\n    row: Math.ceil(window.innerWidth / (imgInfo.width * imgScale)),\n    cols: Math.ceil(window.innerHeight / (imgInfo.height * imgScale)),\n    rowWidth: imgInfo.width * imgScale,\n    colHeight: imgInfo.height * imgScale,\n  }\n\n  for (\n    let r = 0, end = grid.row, asc = 0 <= end;\n    asc ? r < end : r > end;\n    asc ? r++ : r--\n  ) {\n    const x = r * grid.rowWidth\n    for (\n      let c = 0, end1 = grid.cols, asc1 = 0 <= end1;\n      asc1 ? c < end1 : c > end1;\n      asc1 ? c++ : c--\n    ) {\n      const y = c * grid.colHeight\n\n      const item = new gridItem(x, y, grid.rowWidth, grid.colHeight)\n      grids.push(item)\n    }\n  }\n\n  return __range__(0, grids.length, false).map(i => grids[i].draw())\n}\n\nfunction gridItem(x, y, w, h) {\n  if (x == null) {\n    x = 0\n  }\n  if (y == null) {\n    y = 0\n  }\n  this.draw = function () {\n    ctx.drawImage(img, x, y, w, h)\n  }\n}\n\nfunction Photo() {\n  const seed = Math.random() * 2.5 + 1\n  const w = imgInfo.width / seed\n  const h = imgInfo.height / seed\n  let x = window.innerWidth * Math.random()\n  const finalX = x\n  let y = window.innerHeight * Math.random()\n  const finalY = y\n  const r = Math.random() * (180 - -180) + -180\n\n  let forceX = 0\n  let forceY = 0\n\n  const TO_RADIANS = Math.PI / 180\n\n  this.update = function () {\n    const x0 = x\n    const y0 = y\n    const x1 = mouse.x\n    const y1 = mouse.y\n\n    const dx = x1 - x0\n    const dy = y1 - y0\n\n    const distance = Math.sqrt(dx * dx + dy * dy)\n    const powerX = x0 - ((dx / distance) * magnet) / distance\n    const powerY = y0 - ((dy / distance) * magnet) / distance\n\n    forceX = (forceX + (finalX - x0) / 2) / 2.1\n    forceY = (forceY + (finalY - y0) / 2) / 2.2\n\n    x = powerX + forceX\n    y = powerY + forceY\n  }\n  this.draw = () =>\n    rotateAndPaintImage(ctx, img, r * TO_RADIANS, x, y, w / 2, h / 2, w, h)\n}\n\nfunction rotateAndPaintImage(\n  context,\n  image,\n  angle,\n  positionX,\n  positionY,\n  axisX,\n  axisY,\n  widthX,\n  widthY\n) {\n  context.translate(positionX, positionY)\n  context.rotate(angle)\n  context.drawImage(image, -axisX, -axisY, widthX, widthY)\n  context.rotate(-angle)\n  return context.translate(-positionX, -positionY)\n}\n\nfunction render() {\n  let x = 0\n  let y = 0\n  ctx.clearRect(0, 0, width, height)\n  while (y < grids.length) {\n    grids[y].draw()\n    y++\n  }\n  while (x < imgs.length) {\n    imgs[x].update()\n    imgs[x].draw()\n    x++\n  }\n\n  return requestAnimationFrame(render)\n}\n\nfunction __range__(left, right, inclusive) {\n  let range = []\n  let ascending = left < right\n  let end = !inclusive ? right : ascending ? right + 1 : right - 1\n  for (let i = left; ascending ? i < end : i > end; ascending ? i++ : i--) {\n    range.push(i)\n  }\n  return range\n}\n","import './modules/background-animation'\n\nconst cards = document.querySelectorAll('.m-card')\nconst slider = document.querySelector('.slider')\n\nslider.style.height = `${window.innerHeight}px`\n\ncards.forEach(card => addListeners(card))\n\nfunction addListeners(card) {\n  card.addEventListener('mouseenter', () =>\n    setTimeout(() => card.classList.add('scroll-y'), 150)\n  )\n  card.addEventListener('mouseleave', () =>\n    setTimeout(() => {\n      card.classList.remove('scroll-y')\n      card.scrollTop = 0\n    }, 200)\n  )\n}\n"],"names":["canvas","document","getElementById","getContext","width","window","innerWidth","height","innerHeight","Image","cards","querySelectorAll","querySelector","style","forEach","card","addEventListener","setTimeout","classList","add","remove","scrollTop","addListeners"],"sourceRoot":""}